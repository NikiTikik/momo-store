cache:
  paths:
    - frontend/dist/frontend

include:
  - template: Security/SAST.gitlab-ci.yml 
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  # - test_code
  - build_image
  - release


# sast:
#   stage: test_code

# sonarqube-frontend-sast:
#   stage: test_code
#   image: 
#     name: sonarsource/sonar-scanner-cli:latest # тот самый docker-образ, о котором мы все узнаем в будущем
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - cd frontend
#     - >
#       sonar-scanner -Dsonar.qualitygate.wait=true \
#         -Dsonar.projectKey=momo-frontend-nvi \
#         -Dsonar.sources=. \
#         -Dsonar.host.url=https://sonarqube.praktikum-services.ru \
#         -Dsonar.login=223dec9663588a3c4f2ef8f82f0226a67127e145
#   allow_failure: true

build-frontend:
  stage: build_image
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:latest



